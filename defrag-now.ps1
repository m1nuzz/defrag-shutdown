<#
.SYNOPSIS
Defragmentation Execution Script.
Performs defragmentation/optimization based on pre-configured drives and shutdown option.

.DESCRIPTION
This script is generated by defrag-master.ps1. It contains hardcoded parameters
for the drives to optimize and whether to shut down the PC afterwards.
It requires administrative privileges to run Optimize-Volume.

.NOTES
Generated by defrag-master.ps1.
Requires administrative privileges.
Uses Optimize-Volume with Analyze, Verbose, and appropriate operation (ReTrim for SSD, Defrag for HDD).
#>

# --- Parameters (Hardcoded from Master Script) ---
$SelectedDrivesInfo = @(
[PSCustomObject]@{ DriveLetter = 'C'; MediaType = 'SSD' }
) # Insert the pre-built string for the array here
$DoShutdown = $false # Insert the pre-built shutdown line here

# --- Check for Administrative Privileges ---
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Error "This script requires administrative privileges to run Optimize-Volume."
    Write-Host "Please right-click the script file and select 'Run as administrator'." -ForegroundColor Red
    Read-Host "Press Enter to exit."
    exit 1
}

Write-Host "Starting defragmentation process at 12:35:18 on 29-04-2025" -ForegroundColor Cyan
Write-Host ""

# --- Defragmentation Process ---
foreach ($driveInfo in $SelectedDrivesInfo) {
    $driveLetter = $driveInfo.DriveLetter
    $MediaType = $driveInfo.MediaType

    Write-Host "==================================================" -ForegroundColor Cyan
    Write-Host "Processing drive $($driveLetter):" -ForegroundColor Cyan
    Write-Host "[DEBUG] Media Type determined earlier: $MediaType" -ForegroundColor DarkGray
    Write-Host ""

    # Select optimization command based on media type
    switch ($MediaType) {
        "SSD" {
            Write-Host "Drive $($driveLetter): identified as SSD ($MediaType). Performing optimization (Optimize-Volume -Analyze -ReTrim -Verbose)..." -ForegroundColor Green
            try {
                Optimize-Volume -DriveLetter $driveLetter -Analyze -ReTrim -Verbose
            } catch {
                 Write-Error "Error performing SSD optimization on drive $($driveLetter): $($_.Exception.Message)"
            }
        }
        "HDD" {
            Write-Host "Drive $($driveLetter): identified as HDD ($MediaType). Performing optimization (Optimize-Volume -Analyze -Defrag -Verbose)..." -ForegroundColor Green
             try {
                Optimize-Volume -DriveLetter $driveLetter -Analyze -Defrag -Verbose
            } catch {
                 Write-Error "Error performing HDD optimization on drive $($driveLetter): $($_.Exception.Message)"
            }
        }
        default {
            # This case should ideally not be reached if only valid drives are included,
            # but included as a fallback
            Write-Host "Drive $($driveLetter): media type is Unknown/Other ($MediaType). Performing standard optimization (Optimize-Volume -Analyze -Defrag -Verbose)..." -ForegroundColor Yellow
             try {
                # Analyze first, then Defrag for unknown types
                Optimize-Volume -DriveLetter $driveLetter -Analyze -Defrag -Verbose
            } catch {
                 Write-Error "Error performing standard optimization on drive $($driveLetter): $($_.Exception.Message)"
            }
        }
    }

    Write-Host "
Finished processing drive $($driveLetter):" -ForegroundColor Cyan
    Write-Host "==================================================" -ForegroundColor Cyan
    Write-Host ""
}

# --- Shutdown if selected ---
if ($DoShutdown) {
    Write-Host "
Defragmentation tasks complete. Shutting down in 10 seconds..." -ForegroundColor Yellow
    # Use -Force to avoid prompts for open applications
    Shutdown-Computer -Shutdown -Force -Confirm:$false -Delay 10
} else {
    Write-Host "
Defragmentation tasks complete at 12:35:18 on 29-04-2025." -ForegroundColor Green
}

Write-Host ""
Write-Host "Script finished." -ForegroundColor Cyan
Read-Host "Press Enter to exit."

